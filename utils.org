* various utilities i would like to have
** list packages with install *and* upgrade status

i had this in fink.

[[http://stackoverflow.com/a/10428825/1527747][use debian-tools deb822]].  but, i need to parse the sources list, or
all the files in /var/lib/apt/lists.  and, in what order?  how does one
parse the version number to know ordering of versions?
here is the [[https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version][version spec]].

#+BEGIN_SRC python
  from debian import deb822

  # get processor type (i386, amd64, etc.)

  # now, for each i in /var/lib/apt/lists/*._${PROC}_Packages, build a
  # database of what the highest level of each package might be.

  # now, for each installed package, add installed version to the
  # database.  this can be retrieved from deb822 on
  # /var/lib/dpkg/status.

  # now, for each available package, add to the database.  (actually,
  # probably done with the _Packages step above.)

  # now, for each entry in the database, output the summary.
#+END_SRC

or, i could just do a tool that would output the highest available
version for each /var/lib/apt/lists/*_${PROC}_Packages, and then diff
with output from 
: dpkg-query -W --showformat='${Package} ${Version}'

that might make more sense.  actually,
: apt list
sort of does this
: apt list 2>&1 | fgrep '[upgrad' | less
gives the upgradable packages
: apt list 2>&1 | fgrep '[' | less
gives all installed packages (upgradable or not)
: apt list 2>&1 | fgrep -v '[' | less
gives all uninstalled packages

so,
#+BEGIN_SRC python :results output
  # module subprocess: http://stackoverflow.com/a/89243/1527747
  try:    
      import sys
  except ImportError:
      print("python error: unable to import \"sys\"")
      raise
  try:
      import subprocess
  except ImportError:
      sys.stderr.write("python error: unable to import required module \"subprocess\"\n")
      sys.exit(1)

  # run
  # dpkg-query -W --showformat='${Package} ${Version} ${Description}\n' | grep -v '^ '

  try:
      dq = subprocess.Popen("dpkg-query -W --showformat='${Package} ${Version} ${Description}\n'".split(),
                            stdout=subprocess.PIPE)
  except OSError:
      sys.stderr.write("unable to exec dpkg-query(1).  is it installed?\n")
      sys.exit(1)

  try:
      gr = subprocess.Popen(["grep", "-v", "^ "],
                            stdin=dq.stdout, stdout=subprocess.PIPE)
  except OSError:
      sys.stderr.write("unable to exec grep(1).  is it installed?\n")
      sys.exit(1)

  # build a database of the output

  # processing line by line: http://stackoverflow.com/a/8010133/1527747
  for line in gr.stdout:
      sys.stdout.write(line)

  # run
  # apt list 2>&1 | sed 'sX/[^ ]*XXg'

  try:
      al = subprocess.Popen("apt list".split(), stdout=subprocess.PIPE)
  except OSError:
      sys.stderr.write("unable to exec apt(8).  is it installed?\n")
      sys.exit(1)

  try:
      se = subprocess.Popen(["sed", "sX/[^ ]*XXg"],
                            stdin=al.stdout, stdout=subprocess.PIPE)
  except OSError:
      sys.stderr.write("unable to exec sed(8).  is it installed?\n")
      sys.exit(1)



  # update the database with 1) install status ('[' exists in $4); 2)
  # upgradeable ($2 here doesn't match $2 in dpkg-query)

  for line in se.stdout:
      sys.stdout.write(line)

#+END_SRC
